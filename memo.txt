#========================#
# MODEL VIEW CONTROLLER  #
#========================#

Ramverk: Symfony (installeras med composer)
Script: PHP

serverkommando:	    php -S localhost:8888 -t public
                    symfony server:start		(runs on own http://127.0.0.1:8000)

Inlämningsinstux kodstil:

    Fixa till din kod enligt den kodstil du kör genom att köra composer csfix.

    Kolla din kod hur den matchar dina linters genom att köra composer lint.

    Dubbelkolla att dina testfall passerar med composer phpunit.

    Generera dokumentation av din kod med composer phpdoc.

=================================================================================================================

------------
COMPOSER
------------
composer show		                        show all packages
composer --version	                        show version
omposer dump-autoload                       dump-autoload (You should run composer dump-autoload when:
                                                            You’ve added new classes
                                                            You changed your composer.json "autoload" section
                                                            You renamed namespaces or folders
                                                            Things just “aren’t being found” that should be.)


=================================================================================================================

-----------
SYMFONY
-----------
(handle routers)

bin/console					                show commands
bin/console debug:router			        Show routes
bin/console router:match /lucky/number		Match specific route
bin/console cache:clear				        Clear cache
bin/console cache:warmup                    Warm-up cache
bin/console debug:container Controller      Show available services

symfony server:start                        Start server
symfony server:stop                         Stop server
symfony server:status                       Server status


=================================================================================================================

-------
TWIG
-------
(handles active resources, php template engine)

Grundexempel    https://github.com/dbwebb-se/mvc/tree/main/example/symfony


=================================================================================================================

---------
ENCORE
---------
(handles static resources)  

Set .setPublicPath('/build') to .setPublicPath('build') to allow to build assets using 'npm run build'
npm run build krävs efter ändringar i .css (assets/style) för att se implementering vid omstart av servern
KOM IHÅG ATT run build och starta om server OFTA!!!


=================================================================================================================

--------
GIT
--------
(version handling and backup)

git add . 				            Lägg till alla ändringar (eller specifik fil)
git commit -m ".." 	                Commit (-a står för all, -m för message)
git status				            Show status
git push				            Send to repo
git tag -a v1.0 -m ".."             Tag with comment
git tag v1.0.0                      Lightweight tag
git push --tags                     Push with tags
(git checkout -b kmom03              SKapa branch kmom03, endast i webapp-lager)

                =================================================================================
                #                                                                               #
                #    Initial setup: # Gå till me/report                                         #
                #        git init                                                               #
                #        touch README.md                                                        #
                #        git add .                                                              #
                #        git commit -m "First commit"                                           #
                #                                                                               #
                #    Om något går fel kan du alltid ta bort katalogen .git/ och starta om.      #
                #                                                                               #
                =================================================================================
# me/report
rm -rf .git
______________________________________________________________________


=================================================================================================================

---------
NAMESPACE
---------

tools/php-cs-fixer/vendor/bin/php-cs-fixer --help                           To display help in symfony php-standard fixer.
tools/php-cs-fixer/vendor/bin/php-cs-fixer fix src --dry-run -v             Dry run fixer to identify files needing fixing. 
tools/php-cs-fixer/vendor/bin/php-cs-fixer fix src                          Fix files


=================================================================================================================

-------
LINTERS
-------
PHP_CodeSniffer to check for commenting syntax (for NAMESPACE)

PHP MD (Mess Detector)

tools/phpmd/vendor/bin/phpmd --version                                                              Show version
tools/phpmd/vendor/bin/phpmd --help                                                                 Show help
tools/phpmd/vendor/bin/phpmd src text cleancode,codesize,controversial,design,naming,unusedcode     Execute 
tools/phpmd/vendor/bin/phpmd . text tools/phpmd/phpmd.xml                                           Run via phpmd.xml (exceptions and other tweaks): 

Interpret errors: https://phpmd.org/rules/index.html


=================================================================================================================

-------
PHPStan
-------
Find bugs before production.

tools/phpstan/vendor/bin/phpstan --version                                      Show version.
tools/phpstan/vendor/bin/phpstan --help                                         Show help.
tools/phpstan/vendor/bin/phpstan analyse src                                    Execute (note the s not z).              
tools/phpstan/vendor/bin/phpstan analyse -l 9 src                               Validate on level 9*
tools/phpstan/vendor/bin/phpstan analyse -c tools/phpstan/phpstan.neon          Execute via phpstan.neon

*   PHPstan validates your code according to levels between 0 and 10
    where 0 is the loosest level and 9 is the strictest level of linting.
    Try to validate your code on level 9 and then you can downsize the level to an acceptable one: tools/phpstan/vendor/bin/phpstan analyse -l 9 src

    execute via phpstan.neon with: tools/phpstan/vendor/bin/phpstan analyse -c tools/phpstan/phpstan.neon

After added to composer:
    composer phpmd  (run phpmd)
    composer phpstan (run phpstan)
    composer lint (run all things that do linting)

Writing custom commands: https://getcomposer.org/doc/articles/scripts.md#writing-custom-commands


=================================================================================================================

=================================================================================================================

-------
PHP Documentor
-------
(autogen documentation)
tools/phpdoc/phpdoc --version                       Show version
tools/phpdoc/phpdoc --help                          Show help
tools/phpdoc/phpdoc run -d ./src -t ./docs/api      generate code from /src
composer phpdoc                                     for use when documentor is added to composers scripts



=================================================================================================================

-------
PHP UNIT TESTING
-------

php -S localhost:8889                                       Localhost start
php src/Dice/main.php                                       Run in terminal
XDEBUG_MODE=coverage vendor/bin/phpunit                     phpunit directly 
composer phpunit                                            Composer script
./vendor/bin/phpunit                                        When installed globally use this to reach

REport generated to: build/coverage/index.html

composer phpunit -- --filter testCreateObjectNoArguments    test singular

Note the first -- that says to composer to add the remaining part as arguments to the command.
The --filter is a way to ask phpunit to only run the tests matching that string.

Another way to use --filter is to only execute the tests from a specific class, for example --filter GuessTest.
Try it like this: composer phpunit -- --filter GuessTest 

------------------------------------------------------------------------------------
Files related to the tests

Let's look at the files related to phpunit and the test suite.
Item 	Description
build/coverage 	The report with the code coverage from the test suite.
phpunit.xml 	Configuration read by phpunit on startup.
tests/<srcdir> 	The test suite with all test cases that phpunit will execute.
tests/config.php 	Bootstrap file to setup PHP essentials for phpunit and the surroundings, including the autoloader and defining constanst or including mocks.

--------------
Noted

Multiple testMethods can have the same name if in different test-classes and will then be executed by the same command simultaneously.
"If it have no assert, it aint no test."
"If the tests can not run independently, then they are not unit tests."

Try to cover as many source lines of code as possible with your test suite. The test cases you write should cover the whole code, each class, each method, and each line, at least once.
Divide your test suite into classes having reasonable sizes. 

There is an assertion for $this->assertNull() 
Hard to compare Equals for object, need to use som asString to compare results.
Easy to reuse unit-tests if written simple and for testing just one thing, recurring methods, only problem is testing constructor.
Can not test asserts after expectException(), it passes on throwing the error.
\ before (ArgumentCountError) = (\ArgumentCountError) makes it not look in the \App-namespaces
$this->assertNull($result); for testing that function returns nothing.
Unittesterna fixade min lastPlayer()-funktion som var out of bounds.
Unittesterna fixade min getWinner()-funktion som inte var satt att returnera object eller noll (?object) utan enbart null

Man bör nog undvika att skriva metoder som tar delar av spelet (andra objekt) som argument och alltid utgå från spelet självt ($this i klasserna), för att undvika att man inte når viss funktionalitet inne i funktione (ex statusändring)

==================================================================================================================================================

SYMFONY DOCTRINE

(commands for terminal)

php bin/console doctrine:database:create            Create database
sqlite3 var/data.db                                 Check database schema
php bin/console make:entity                         Create entity
    Then set entity class name
    Set Property name
    Set field type
    questions can just be passed by enter
php bin/console make:migration                      Make migration
more migrations/Version20250611193422.php           Check migration
up()                                                Upgrade migration
down()                                              Downgrade migration

sqlite3 var/data.db                                 Run SQLite on the database
    .schema                                             show schema

php bin/console make:controller ProductController   Create controller
php bin/console debug:router                        Debug router (see if working)
php bin/console debug:router product                Verify specific (name in example is product)
php bin/console router:match /product               Verify match

    Go to route to run code (add product)

sqlite3 -header -column var/data.db                 Review db content
    SELECT * FROM Product;                          See all data in Product 

php bin/console dbal:run-sql 'SELECT * FROM product'    To do strict SQL straight from terminal (not need to first start SQL and the type) This uses the dotenv file.

use App\Repository\ProductRepository;               Update namespace in controller


NB. Custom commands for Repository MUST go into the repository Class.


Remember that methods that update the state and the database should really be POST and not GET. This method was just simpler to implement to show how to work with Doctrine to update the database.

==================================================================================
PHPMETRICS
==================================================================================

Quality of code.

Install
mkdir --parents tools/phpmetrics
composer require --working-dir=tools/phpmetrics phpmetrics/phpmetrics

Commands:
                                (if in Symfony dir)
Show version                    tools/phpmetrics/vendor/bin/phpmetrics --version
Show help                       tools/phpmetrics/vendor/bin/phpmetrics --help
Show all metrics available      tools/phpmetrics/vendor/bin/phpmetrics --metrics
Generate report in terminal     tools/phpmetrics/vendor/bin/phpmetrics src
Generate report in html         tools/phpmetrics/vendor/bin/phpmetrics --report-html=docs/metrics src
(report found in docs/metrics)
Run by configuration file       tools/phpmetrics/vendor/bin/phpmetrics --config=tools/phpmetrics/phpmetrics.json
Run with composer               composer phpmetrics
(Add script to composer.json first)

KMOM10

// Debugging
error_reporting(E_ALL);
ini_set('display_errors', 1);

Accessing associative arrays: =>
Partial template include = _exampletemplate.html.twig
assets use for graphics
z-index: 1 (CSS) puts the element behind other elements (use if element cover parent div)
(2 puts on top)
Combining with JavaScript to not get that delayed behind the scenes feeling
Using objects to be able to operate on the in symfony/twig
self:: and this-> when calling static methods from inside class
calling module functions directly from nameSpace App\Proj\functionName();, like a static for module function. Several options
Array to string conversion on passing data directly to twig template.
Sensitivity to var_dumping, outputs unwanted data ad confuses twig
Different ways to image-map (using HTML Image maps - easiest)
The encore steps to make js inventory work. requesting/queryin to/from js to php route
Accessing database file from src, assets, or public, different depending on encore, php dir
roomsData['rooms'], unnecessarily nested, too late to change. aCause error in addITem
Use $key variable, not literal 'key'
onclick="selectInventoryItem('{{ item.item }}')"
break 2;
TA bort gamla var_dump!!! Stör JSON parsing
Npm run build hela tiden..
Fixed move with limitations/gates (missing indexer)
Fixe no pick up on unpickable items, added final_move route
Added final-route check in objectInteraction
Fixed deathtrap by hardcoding pic and creating own template
Moved playAudio to after itemcheck in clickedItem (never had time to call status-update on radio)
Added part for resetting when finished
Added clearStorage after deathtrap
Moved playAudio inside the check in js objectInteraction
index-template updated to handle clickers on reset
Added clearing clickers on reset
Fixed clearClickers-error by moving script to index-template instead of call from adventure.js
Fixed deathtrap interaction on door
Fixed flaw; key interaction on truck for status change on uneven clicks
Cleared unused functions remaining from before separate database init implemented.
Added unittest for inventory and RoomHandler

TODO:

Test code
run scrutinizer
add badges to README
write report
unit test StroageHanlder, build mock files for comparison